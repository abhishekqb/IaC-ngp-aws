AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  TagName:
    Type: String
    Description: TagName of your Infrastructure.
  ECSClusterName:
    Type: String
    Description: Name of an existing ECS Cluster.
  VPC:
    Type: String
    Description: Provide the VPC ID.
  PrivateSubnetAZ1:
    Description: Availability Zone ID private subnet 1.
    Type: String
  PrivateSubnetAZ2:
    Description: Availability Zone ID private subnet 2.
    Type: String
  PrivateSecurityGroupID:
    Description: Private Security Group ID for instances.
    Type: String
  TykAPIKey:
    Description: Provide the Tyk APIKEY.
    Type: String
  TykRPCCredential:
    Description: Provide Tyk RPC Credential.
    Type: String
  TykSecret:
    Description: Provide Tyk Secret Key
    Type: String
  RedisNodeType:
    Default: cache.m1.small
    Description: The compute and memory capacity of the nodes in the  Redis Cluster
    Type: String
    AllowedValues:
    - cache.t1.micro
    - cache.m1.small
    - cache.m1.medium
    - cache.m1.large
    - cache.m1.xlarge
    - cache.m2.xlarge
    - cache.m2.2xlarge
    - cache.m2.4xlarge
    - cache.m3.xlarge
    - cache.m3.2xlarge
    - cache.c1.xlarge
    ConstraintDescription: must select a valid Cache Node type.
Resources:
  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      ClusterName: !Join ['', [!Ref 'TagName', '-Redis']]
      CacheNodeType: !Ref 'RedisNodeType'
      Engine: redis
      EngineVersion: '2.8.24'
      NumCacheNodes: '1'
      Port: '6379'
      CacheSubnetGroupName: !Ref 'RedisSubnetGroup'
      VpcSecurityGroupIds: [!GetAtt RedisSecurityGroup.GroupId]
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Redis Security Group
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref 'TagName', '-Redis']]
  RedisSecurityGroupInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'RedisSecurityGroup'
      IpProtocol: tcp
      FromPort: '6379'
      ToPort: '6379'
      CidrIp: 10.0.0.0/16
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: !Join ['', [!Ref 'TagName', '-Redis']]
      Description: 'Subnet Group for Redis Cache'
      SubnetIds: [!Ref 'PrivateSubnetAZ1', !Ref 'PrivateSubnetAZ2']
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14
  Tyktaskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: Tyk
      ContainerDefinitions:
      - Name: tyk-hybrid
        Cpu: '1024'
        Essential: 'true'
        Image: tykio/tyk-hybrid-docker
        Memory: '512'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: tyk
        PortMappings:
        - ContainerPort: 8181
          HostPort: 8181
        - ContainerPort: 9090
          HostPort: 9090
        Environment:
        - Name: APIKEY
          Value: !Ref TykAPIKey
        - Name: BINDSLUG
          Value: 1
        - Name: DISABLENGINX
          Value: 1
        - Name: PORT
          Value: 8181
        - Name: REDISHOST
          Value: !GetAtt RedisCluster.RedisEndpoint.Address
        - Name: RPORT
          Value: 6379
        - Name: SECRET
          Value: !Ref TykSecret
        - Name: RPCCredential
          Value: !Ref TykRPCCredential
      Volumes:
      - Name: my-vol
  Tykservice:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref 'ECSClusterName'
      DesiredCount: '1'
      LoadBalancers:
      - ContainerName: tyk-hybrid
        ContainerPort: '8181'
        TargetGroupArn: !Ref 'ECSTG'
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref 'Tyktaskdefinition'
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
  ECSServicePolicy:
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "ecs-service"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Action: ['elasticloadbalancing:*', 'ec2:*']
            Resource: '*'
      Roles: [!Ref 'ECSServiceRole']
  TykALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: TykALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: 
        - !Ref PrivateSubnetAZ1
        - !Ref PrivateSubnetAZ2
      SecurityGroups:
        - !Ref PrivateSecurityGroupID
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      LoadBalancerArn: !Ref 'TykALB'
      Port: '80'
      Protocol: HTTP
  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'ALBListener'
      Priority: 1
  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: TykALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ECSTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${TagName}-VpcId"
Outputs:
  ecsservice:
    Value: !Ref 'Tykservice'
